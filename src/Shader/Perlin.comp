#version 460 core
layout (local_size_x = 16, local_size_y = 16) in;

layout (rgba8, binding = 1) uniform writeonly image2D uOutput;

uniform float uTime;
uniform float uScale;
uniform int uOctaves;
uniform float uPersistence;
uniform float uLacunarity;

const int permutation[256] = int[](
    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225,
    140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148,
    247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32,
    57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175,
    74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122,
    60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54,
    65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169,
    200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64,
    52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212,
    207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213,
    119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,
    129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104,
    218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241,
    81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157,
    184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93,
    222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
);

int hash(int x) {
    return permutation[x & 255];
}

int hash2D(int x, int y) {
    return hash(x + hash(y));
}

vec2 gradient(int hash) {
    switch (hash & 3) {
        case 0: return vec2(1.0, 1.0);
        case 1: return vec2(-1.0, 1.0);
        case 2: return vec2(-1.0, -1.0);
        case 3: return vec2(1.0, -1.0);
        default: return vec2(0.0, 0.0);
    }
}

float fade(float t) {
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

float lerp(float a, float b, float t) {
    return a + t * (b - a);
}

float dotGridGradient(int ix, int iy, float x, float y) {
    vec2 grad = gradient(hash2D(ix, iy));
    float dx = x - float(ix);
    float dy = y - float(iy);
    return dx * grad.x + dy * grad.y;
}

float perlinNoise(float x, float y) {

    int x0 = int(floor(x));
    int x1 = x0 + 1;
    int y0 = int(floor(y));
    int y1 = y0 + 1;
    
    float sx = fade(x - float(x0));
    float sy = fade(y - float(y0));

    float n0 = dotGridGradient(x0, y0, x, y);
    float n1 = dotGridGradient(x1, y0, x, y);
    float ix0 = lerp(n0, n1, sx);
    
    n0 = dotGridGradient(x0, y1, x, y);
    n1 = dotGridGradient(x1, y1, x, y);
    float ix1 = lerp(n0, n1, sx);
    
    return lerp(ix0, ix1, sy);
}

float seamlessPerlinNoise(float x, float y, float repeatX, float repeatY) {
    float noise1 = perlinNoise(x, y);
    float noise2 = perlinNoise(x - repeatX, y);
    float noise3 = perlinNoise(x, y - repeatY);
    float noise4 = perlinNoise(x - repeatX, y - repeatY);
    
    float blendX = fade(x / repeatX);
    float blendY = fade(y / repeatY);

    float i1 = lerp(noise1, noise2, blendX);
    float i2 = lerp(noise3, noise4, blendX);
    
    return lerp(i1, i2, blendY);
}

float seamlessFBM(float x, float y, float repeatX, float repeatY, int octaves, float persistence, float lacunarity) {
    float value = 0.0;
    float amplitude = 1.0;
    float frequency = 1.0;
    float maxValue = 0.0;
    
    float currentRepeatX = repeatX;
    float currentRepeatY = repeatY;
    
    for (int i = 0; i < octaves; i++) {
        value += seamlessPerlinNoise(x * frequency, y * frequency, currentRepeatX * frequency, currentRepeatY * frequency) * amplitude;
        maxValue += amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
        
        currentRepeatX *= lacunarity;
        currentRepeatY *= lacunarity;
    }
    
    return value / maxValue;
}

void main() {
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imageSize = imageSize(uOutput);

    vec2 uv = vec2(texelCoord) / vec2(imageSize);

    vec2 noiseCoord = uv * uScale;

    noiseCoord += uTime * 0.1;
    
    float repeatX = uScale;
    float repeatY = uScale;
    
    float noise = seamlessFBM(noiseCoord.x, noiseCoord.y, repeatX, repeatY, uOctaves, uPersistence, uLacunarity);

    noise = (noise + 1.0) * 0.5;
    
    vec4 color = vec4(vec3(noise), 1.0);

    imageStore(uOutput, texelCoord, color);
}
